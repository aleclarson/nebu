// Generated by CoffeeScript 2.3.0
var AcornMixin, MagicString, Walker, acorn, dirname, isObject, mergeVisitors, nebu, relative;

({relative, dirname} = require('path'));

MagicString = require('magic-string');

AcornMixin = require('./mixin');

isObject = require('is-object');

Walker = require('./walker');

acorn = require('acorn');

nebu = exports;

nebu.process = function(input, opts) {
  var ast, mapURL, mixin, output, plugins, res, walker;
  if (!opts.plugins || !opts.plugins.length) {
    throw Error('Must provide at least one plugin');
  }
  // Fast plugin search by node type
  plugins = mergeVisitors(opts.plugins);
  // Let caller pass their own AST
  ast = opts.ast || acorn.parse(input, {
    ...opts.parser,
    sourceType: 'module',
    ecmaVersion: 9
  });
  // Fast mutation with sourcemap support
  output = new MagicString(input);
  // Traversal controller
  walker = new Walker(opts.state, plugins);
  if (!ast.nebu) {
    mixin = AcornMixin.create(output, walker);
    AcornMixin.apply(mixin);
  }
  ast.depth = 0;
  walker.walk(ast);
  if (mixin) {
    AcornMixin.remove(mixin);
  }
  if (!opts.sourceMaps) {
    return output.toString();
  }
  res = {
    js: output.toString(),
    map: output.generateMap({
      includeContent: true,
      sourceRoot: opts.sourceRoot,
      source: opts.filename,
      file: opts.sourceMapTarget
    })
  };
  mapURL = opts.sourceMaps !== true ? res.map.toUrl() : opts.filename && opts.sourceMapTarget ? relative(dirname(opts.filename), opts.sourceMapTarget) : void 0;
  if (mapURL) {
    res.js += '\n//# sourceMappingURL=' + mapURL;
  }
  if (opts.sourceMaps !== 'inline') {
    return res;
  }
  return res.js;
};

mergeVisitors = function(plugins) {
  var arr, i, len, plugin, type, visitor, visitors;
  visitors = Object.create(null);
  for (i = 0, len = plugins.length; i < len; i++) {
    plugin = plugins[i];
    if (!isObject(plugin)) {
      throw Error('Plugins must be objects');
    }
    for (type in plugin) {
      visitor = plugin[type];
      if (arr = visitors[type]) {
        arr.push(visitor);
      } else {
        visitors[type] = [visitor];
      }
    }
  }
  return visitors;
};
