// Generated by CoffeeScript 2.3.0
var AcornMixin, MagicString, Walker, dirname, isObject, mergePlugins, nebu, relative;

({relative, dirname} = require('path'));

MagicString = require('magic-string');

AcornMixin = require('./mixin');

isObject = require('is-object');

Walker = require('./walker');

nebu = exports;

Object.defineProperty(nebu, 'acorn', {
  writable: true,
  value: null
});

nebu.process = function(input, opts) {
  var acorn, ast, mapURL, mixin, output, plugins, res, walker;
  if (!Array.isArray(opts.plugins)) {
    throw Error('The `plugins` option must be an array');
  }
  // Fast plugin search by node type
  if (mergePlugins(plugins = {}, opts.plugins) === 0) {
    throw Error('No plugins provided a visitor');
  }
  if (!(acorn = nebu.acorn)) {
    nebu.acorn = acorn = require('acorn');
  }
  // Let caller pass their own AST
  ast = opts.ast || acorn.parse(input, {
    ...opts.parser,
    sourceType: 'module',
    ecmaVersion: 9
  });
  // Fast mutation with sourcemap support
  output = new MagicString(input);
  // Traversal controller
  walker = new Walker(opts.state, plugins);
  // Temporarily extend Node.prototype
  mixin = AcornMixin.init(acorn, output, walker);
  ast.depth = 0;
  walker.walk(ast);
  AcornMixin.remove(acorn, mixin);
  if (!opts.sourceMaps) {
    return output.toString();
  }
  res = {
    js: output.toString(),
    map: output.generateMap({
      file: opts.generatedFile,
      source: opts.filename,
      includeContent: opts.includeContent !== false
    })
  };
  mapURL = opts.sourceMaps !== true ? res.map.toUrl() : opts.filename && opts.sourceMapTarget ? relative(dirname(opts.filename), opts.sourceMapTarget) : void 0;
  if (mapURL) {
    res.js += '\n//# sourceMappingURL=' + mapURL;
  }
  if (opts.sourceMaps !== 'inline') {
    return res;
  }
  return res.js;
};

mergePlugins = function(visitors, plugins) {
  var arr, count, i, len, plugin, type, visitor;
  count = 0;
  for (i = 0, len = plugins.length; i < len; i++) {
    plugin = plugins[i];
    if (Array.isArray(plugin)) {
      count += mergePlugins(visitors, plugin);
    } else if (isObject(plugin)) {
      for (type in plugin) {
        visitor = plugin[type];
        count += 1;
        if (arr = visitors[type]) {
          arr.push(visitor);
        } else {
          visitors[type] = [visitor];
        }
      }
    }
  }
  return count;
};
